@model BibliotecaMvc.Models.Usuario

@{
    ViewData["Title"] = "Adicionar Novo Usuário";
}

<h2>Adicionar Novo Usuário</h2>

<form asp-action="Create" method="post" onsubmit="return validateForm()">
    <div class="form-group">
        <label>Nome do Usuário:</label>
        <input id="NomeUsuario" name="NomeUsuario" class="form-control" />
        <span id="NomeUsuarioError" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Criar</button>
    
    <!-- Exibir mensagem de erro -->
    @if (!string.IsNullOrEmpty(TempData["MensagemErro"] as string))
    {
        <div class="text-danger mt-2">@TempData["MensagemErro"]</div>
    }
</form>

<a asp-action="Index">Voltar para a Lista</a>

<script>
    async function validateForm() {
        // Limpar mensagens de erro
        document.getElementById('NomeUsuarioError').innerText = '';

        var nomeUsuario = document.getElementById('NomeUsuario').value.trim();

        if (nomeUsuario === "") {
            document.getElementById('NomeUsuarioError').innerText = 'O Nome do Usuário é obrigatório.';
            return false;
        }

        var response = await fetch(`/api/Usuarios/verificarNomeUsuario/${nomeUsuario}`);

        if (!response.ok) {
            // Algo deu errado ao verificar o nome de usuário
            document.getElementById('NomeUsuarioError').innerText = 'Erro ao verificar o nome de usuário. Tente novamente.';
            return false;
        }

        var data = await response.json();

        if (data) {
            // Retorna true se o nome de usuário já existe
            document.getElementById('NomeUsuarioError').innerText = 'Este nome de usuário já está em uso. Escolha outro.';
            return false; // Impede o envio do formulário
        } else {
            return true; // Permite o envio do formulário
        }
    }
</script>
